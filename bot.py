import config
import telebot
from telebot import types  # –∫–Ω–æ–ø–∫–∏
from string import Template

from db import SQLighter
from quiz import Quiz, Question

bot = telebot.TeleBot(config.token)
users = {}

scores = [5, 10]

questions = [Question('–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–∞?', '–ò–Ω–Ω–∞',
                      ['–ò–Ω–Ω–∞', '–ü–æ–ª–ª–∏', '–ê–π–≥—é–ª—å']),
             Question('–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ ‚Äú–ö–æ—Ç—è—á–∏–π –ò–Ω–Ω–æ–ø–æ–ª–∏—Å‚Äù?', '490-510+',
                      ['370-390', '440-460', '490-510+']),
             Question('–ö—Ç–æ –∏–∑ –ø—Ç–∏—Ü –Ω–µ –æ–±–∏—Ç–∞–µ—Ç –≤ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–µ?', '–î–ª–∏–Ω–Ω–æ—Ö–≤–æ—Å—Ç–∞—è —Å–∏–Ω–∏—Ü–∞',
                      ['–ö–æ–Ω–æ–ø–ª—è–Ω–∫–∞', '–õ–∞—Å—Ç–æ—á–∫–∞', '–î–ª–∏–Ω–Ω–æ—Ö–≤–æ—Å—Ç–∞—è —Å–∏–Ω–∏—Ü–∞']),
             Question('–°–∫–æ–ª—å–∫–æ —É–ª–∏—Ü –≤ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–µ?', '5', ['4', '5', '6']),
             Question('–ö–∞–∫ –∑–æ–≤—É—Ç –º—ç—Ä–∞ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–∞?', '–†—É—Å–ª–∞–Ω',
                      ['–†—É—Å–ª–∞–Ω', '–†—É—Å—Ç–µ–º', '–†—É—Å—Ç–∞–º']),
             Question('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞ –∏–º. –ê.–°. –ü–æ–ø–æ–≤–∞?', '–ö–∞–º–µ–Ω—å, —Ç—Ä–∞–≤–∞, –¥–µ—Ä–µ–≤–æ',
                      ['–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', '–ö–∞–º–µ–Ω—å, —Ç—Ä–∞–≤–∞, –¥–µ—Ä–µ–≤–æ',
                       '–í–æ–¥–∞, –ó–µ–º–ª—è, –û–≥–æ–Ω—å, –í–æ–∑–¥—É—Ö']),
             Question('–ö–∞–∫ –∑–æ–≤—É—Ç —Å–∞–º—É—é –∑–Ω–∞–º–µ–Ω–∏—Ç—É—é —Å–æ–±–∞–∫—É –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–∞?', '–ù–æ—Ä–∞',
                      ['–ù–æ—Ä–∞', '–ù–æ–¥–∞', 'Null']),
             Question('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∞—Ä –≤ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å–µ?', '108',
                      ['108', '404', '8080']),
             Question('–ö—Ç–æ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π –ø—Ä–∏–µ–∑–∂–∞–ª –≤ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∏–≤–∫—É –æ—Ç COVID-19?',
                      '–†—ã–∂–∏–π –∏–∑ –ò–≤–∞–Ω—É—à–µ–∫',
                      ['–ë–∞—Ä—É—Ö –°–∞–¥–æ–≥—É—Ä—Å–∫–∏–π', '–ü–∞–≤–µ–ª –§–∏–Ω–∫–µ–ª—å—à—Ç–µ–π–Ω', '–†—ã–∂–∏–π –∏–∑ –ò–≤–∞–Ω—É—à–µ–∫'])
             ]
quiz = Quiz(questions)


class User:
    def __init__(self, chat_id, name, alias):
        self.chat_id = chat_id
        self.name = name
        self.alias = alias
        self.first_name = ''
        self.last_name = ''
        self.full_name = ''
        self.is_registered = False
        self.phone = ''
        self.email = ''
        self.cv_link = ''
        self.step = 0
        self.balance = 0
        self.tasks = [False, False, False]
        self.test_score = 0
        self.question_num = 0


def get_menu():
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_row1 = ['üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    buttons_row2 = ['üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üèÜ –ë–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤']
    buttons_row3 = ['üìÑ –†–µ–∑—é–º–µ', 'üíØ –¢–µ—Å—Ç']
    menu.add(*buttons_row1)
    menu.add(*buttons_row2)
    menu.add(*buttons_row3)
    return menu


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    if len(users) > 0:
        if chat_id in users.keys():
            current_user = users[chat_id]
        else:
            current_user = False
    else:
        current_user = False

    keyboard = get_menu()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
    if current_user and current_user.is_registered:
        text = "–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å"
    else:
        text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! " \
               + "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è "
        name = message.from_user.first_name
        alias = message.from_user.username
        if not alias:
            alias = ''
        users[chat_id] = User(chat_id, name, alias)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, "
                     + message.from_user.first_name
                     + "!\n–Ø RCI –±–æ—Ç ü§ñ \n"
                     + "C –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –Ω–∞ –ø—Ä–∏–∑—ã!"
                     + "\n\n" + text, reply_markup=keyboard)


def finish_test(message):
    chat_id = message.chat.id
    user = users[chat_id]

    markup = get_menu()

    if user.test_score == 9:
        user.balance += 10
        update_test_progress_in_db(user)
        update_db_user_balance(user)
        finish_test_db(user)
        bot.send_message(config.chat_id, getUserData(user, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                         parse_mode="Markdown")
        bot.send_message(chat_id,
                         '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ó–∞ —ç—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ—â—ë 10 –±–∞–ª–ª–æ–≤ –Ω–∞ '
                         '–±–∞–ª–∞–Ω—Å! '
                         ' –¢–µ–ø–µ—Ä—å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(user.balance) + ' –±–∞–ª–ª–æ–≤', reply_markup=markup)
    else:
        user.balance += 5
        update_db_user_balance(user)
        finish_test_db(user)
        bot.send_message(config.chat_id, getUserData(user, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                         parse_mode="Markdown")
        bot.send_message(chat_id,
                         '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ ' + str(user.test_score) +
                         ' –≤–æ–ø—Ä–æ—Å–æ–≤! –ó–∞ —ç—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ—â–µ 5 –±–∞–ª–ª–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å!'
                         ' –¢–µ–ø–µ—Ä—å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(user.balance) + ' –±–∞–ª–ª–æ–≤',
                         reply_markup=markup)


def process_check_answer(message):
    user = users[message.chat.id]
    i = user.question_num
    q = questions[i]
    if message.text == q.correct:
        user.test_score += 1
    i += 1
    if i == len(quiz.questions):
        finish_test(message)
    else:
        user.question_num = i
        update_test_progress_in_db(user)
        quiz_ask(message)


def quiz_ask(message):
    update_db()
    cid = message.chat.id
    user = users[cid]
    i = user.question_num
    q = questions[i]
    answers = q.answers

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton(text=answers[0])
    keyboard.add(button_1)
    button_2 = answers[1]
    keyboard.add(button_2)
    button_3 = answers[2]
    keyboard.add(button_3)

    bot.send_message(cid, str(i+1) + "." + q.text, reply_markup=keyboard)
    bot.register_next_step_handler(message, process_check_answer)


def process_user_test(message):
    cid = message.chat.id
    if message.text == '–ù–µ—Ç —è –Ω–µ –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç':
        bot.send_message(cid, '–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å)', reply_markup=get_menu())
    if message.text == '–î–∞ —è –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç':
        bot.send_message(cid, '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º)')
        quiz_ask(message)


def user_test(message):
    update_db()
    cid = message.chat.id
    user = users[cid]

    if user and user.is_registered:
        if user.tasks[2]:
            bot.send_message(cid, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons_row = ['–ù–µ—Ç —è –Ω–µ –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', '–î–∞ —è –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç']
            keyboard.add(*buttons_row)
            bot.send_message(cid, '–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–∫–∏ü¶æ)' +
                             '\n–¢—ã –≥–æ—Ç–æ–≤(–∞)?', reply_markup=keyboard)

            bot.register_next_step_handler(message, process_user_test)
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ")


@bot.message_handler(content_types=["text"])
def click_button(message):
    if message.text == 'üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        user_registration(message)
    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        help_user(message)
    elif message.text == 'üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å':
        user_status(message)
    elif message.text == 'üèÜ –ë–∞–ª–∞–Ω—Å –æ—á–∫–æ–≤':
        user_balance(message)
    elif message.text == 'üìÑ –†–µ–∑—é–º–µ':
        user_cv(message)
    elif message.text == 'üíØ –¢–µ—Å—Ç':
        user_test(message)


def help_user(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é. –ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)


def user_status(message):
    update_db()
    chat_id = message.chat.id
    user = users[chat_id]
    if user and user.is_registered:
        status = '–ü—Ä–æ–≥—Ä–µ—Å—Å: \n –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è '
        if user.tasks[0]:
            status += "‚úÖ"
        else:
            status += "‚ùå"
        status += "\n –†–µ–∑—é–º–µ "
        if user.tasks[1]:
            status += "‚úÖ"
        else:
            status += "‚ùå"
        status += "\n –¢–µ—Å—Ç "
        if user.tasks[2]:
            status += "‚úÖ"
        else:
            status += "‚ùå"
        bot.send_message(chat_id, status)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ")


def user_balance(message):
    chat_id = message.chat.id
    user = users[chat_id]
    if user and user.is_registered:
        update_db()
        bot.send_message(chat_id, "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + str(user.balance) + " –±–∞–ª–ª–æ–≤ ‚ú®‚ú®‚ú®")
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ")


def user_cv(message):
    chat_id = message.chat.id
    user = users[chat_id]
    if user and user.is_registered:
        if user.tasks[1]:
            bot.send_message(chat_id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")
        else:
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove(selective=False)
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ, –ª–∏–±–æ –∞–∫–∫–∞—É–Ω—Ç linkedin, –∏–ª–∏ vk",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, process_cv_step)
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: üë©‚Äçüíª –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ")


def user_registration(message):
    try:
        chat_id = message.chat.id
        if users[chat_id] and users[chat_id].is_registered:
            bot.send_message(chat_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        else:
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove(selective=False)

            msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è', reply_markup=markup)
            bot.register_next_step_handler(msg, process_first_name_step)

    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)


def process_first_name_step(message):
    if message.text == '/start':
        send_welcome(message)
    else:
        try:
            chat_id = message.chat.id
            user = users[chat_id]
            user.first_name = message.text

            msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
            bot.register_next_step_handler(msg, process_last_name_step)

        except Exception as e:
            print(e)
            bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)


def process_last_name_step(message):
    try:
        chat_id = message.chat.id
        user = users[chat_id]
        user.last_name = message.text
        user.full_name = user.last_name + ' ' + user.first_name

        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)


def process_phone_step(message):
    try:
        int(message.text)

        chat_id = message.chat.id
        user = users[chat_id]
        user.phone = message.text

        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à email')
        bot.register_next_step_handler(msg, process_email_step)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)


def process_cv_step(message):
    try:
        chat_id = message.chat.id
        user = users[chat_id]
        user.cv_link = message.text
        user.tasks[1] = True
        user.balance += scores[0]

        update_db_user_cv(user)
        bot.send_message(config.chat_id, getUserData(user, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                         parse_mode="Markdown")

        bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚ú®\n–í—ã –ø–æ–ª—É—á–µ—Ç–µ +" + str(scores[0]) + " –±–∞–ª–ª–æ–≤",
                         reply_markup=get_menu())

    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)


def process_email_step(message):
    try:
        chat_id = message.chat.id
        user = users[chat_id]
        user.email = message.text
        user.is_registered = True
        user.tasks[0] = True
        user.step = 1

        add_new_user_to_db(user)

        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(user, '–°–ø–∞—Å–∏–±–æ =) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!', message.from_user.first_name),
                         parse_mode="Markdown")
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(config.chat_id, getRegData(user, '–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ', bot.get_me().username),
                         parse_mode="Markdown")

        menu_step(message)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ email.'
                           + '\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ' + config.helpdesk)
        bot.register_next_step_handler(msg, process_email_step)


def menu_step(message):
    keyboard = get_menu()
    bot.send_message(message.chat.id, "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–¥–∞–Ω–∏—è: \nüìÑ –†–µ–∑—é–º–µ (" + str(scores[0]) \
                     + " –±–∞–ª–ª–æ–≤)\nüíØ –¢–µ—Å—Ç (–ú–∞–∫—Å = " + str(scores[1]) + " –±–∞–ª–ª–æ–≤)", reply_markup=keyboard)


# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template(
        '$title *$name* \n#*$alias* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n Email: *$email* \n Telegram: @*$alias*')

    if user.alias == '':
        alias = user.name
    else:
        alias = user.alias

    return t.substitute({
        'title': title,
        'name': name,
        'fullname': user.full_name,
        'phone': user.phone,
        'email': user.email,
        'alias': alias
    })


def getUserData(user, title):
    t = Template(
        '$title \n#*$alias* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n Email: *$email* \n Telegram: @*$alias* '
        '\n –†–µ–∑—é–º–µ: *$cv* \n –ë–∞–ª–ª—ã: *$score*')

    if user.alias == '':
        alias = user.name
    else:
        alias = user.alias

    return t.substitute({
        'title': title,
        'fullname': user.full_name,
        'phone': user.phone,
        'email': user.email,
        'alias': alias,
        'cv': user.cv_link,
        'score': user.balance
    })


def update_users_from(db):
    rows = db.find_all()
    for row in rows:
        user = User(*row[:3])
        user.first_name = row[3]
        user.last_name = row[4]
        user.is_registered = row[5]
        user.tasks = [user.is_registered, row[6], row[7]]
        user.phone = row[8]
        user.email = row[9]
        user.cv_link = row[10]
        user.balance = row[11]
        user.question_num = row[12]
        user.test_score = row[13]
        users[user.chat_id] = user


def update_db():
    db = SQLighter(config.database_name)
    update_users_from(db)
    db.close()


def add_new_user_to_db(user):
    db = SQLighter(config.database_name)
    db.add_user(cid=user.chat_id,
                name=user.name,
                first_name=user.first_name,
                last_name=user.last_name,
                alias=user.alias,
                phone=user.phone,
                email=user.email
                )
    db.close()


def update_db_user_cv(user):
    db = SQLighter(config.database_name)
    db.update_user_cv(user.chat_id, user.cv_link)
    db.update_user_cv_add(user.chat_id)
    db.update_user_balance(user.chat_id, user.balance)
    db.close()


def finish_test_db(user):
    db = SQLighter(config.database_name)
    db.update_user_finish_test(user.chat_id)
    db.close()


def update_db_user_balance(user):
    db = SQLighter(config.database_name)
    db.update_user_balance(user.chat_id, user.balance)
    db.close()


def update_test_progress_in_db(user):
    db = SQLighter(config.database_name)
    db.update_user_test_num(user.chat_id, user.question_num)
    db.update_user_test_score(user.chat_id, user.test_score)
    db.close()


def main():
    db = SQLighter(config.database_name)
    db.init_db()
    update_users_from(db)
    db.close()
    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
